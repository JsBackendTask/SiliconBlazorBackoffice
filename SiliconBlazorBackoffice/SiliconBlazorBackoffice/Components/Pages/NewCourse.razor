@page "/admin/coursemanager/new"
@rendermode InteractiveServer
@using Infrastructure.Models
@using System.Globalization

<PageTitle>New Course</PageTitle>

<h1>Create a new course</h1>

    <p class="error-styling">@Message</p>

    <EditForm Model="courseDetails" OnValidSubmit="CreateCourseAsync" FormName="CourseCreateForm" class="user-form">
        <div class="row">
            <div class="col">
                <h3>General info and content </h3>
                <div class="input-group mb-2">
                    <label for="Title">Title</label>
                    <InputText @bind-Value="courseDetails.Title" />
                </div>
                <div class="input-group mb-2">
                    <label for="Ingress">Ingress</label>
                    <InputText @bind-Value="courseDetails.Ingress" />
                </div>
                <div class="input-group mb-2">
                    <label for="Author">Author</label>
                    <InputText @bind-Value="FirstAuthorName" />
                </div>
                <div class="input-group mb-2">
                    <label for="CurrentPrice">Current Price</label>
                    <InputNumber @bind-Value="courseDetails.Prices.CurrentPrice" />
                </div>
                <div class="input-group mb-2">
                    <label for="DiscountPrice">Discount Price</label>
                    <InputNumber @bind-Value="courseDetails.Prices.DiscountPrice" />
                </div>
                <div class="input-group mb-2">
                    <label for="Hours">Hours</label>
                    <InputText @bind-Value="courseDetails.Hours" />
                </div>
                <div class="input-group mb-2">
                    <label for="ContentDescription">Content in HTML</label>
                    <InputTextArea @bind-Value="courseDetails.Content.Description" style="width: 1000px; height: 300px;" />
                </div>
            </div>

            <div class="col">
                <h3>Program details list</h3>
                <button @onclick:preventDefault="true" @onclick="AddProgramDetail" class="btn-theme mb-2">Add Program Detail</button>

                @foreach (var program in courseDetails.Content.ProgramDetails)
                {
                    <div class="input-group mb-2">
                        <label for="ProgramTitle">Program Title @program.Id</label>
                        <InputText @bind-Value="program.Title" />
                    </div>
                    <div class="input-group mb-2">
                        <label for="ProgramDescription">Program Description</label>
                        <InputText @bind-Value="program.Description" />
                    </div>
                }
                <div class="input-group mb-2">
                    <label for="IsBestseller">Is Bestseller?</label>
                    <InputCheckbox @bind-Value="courseDetails.IsBestSeller" />
                </div>
            </div>
        </div>
        <span>
            <button type="submit" class="btn-theme-s mb-3">Create</button>
            <button @onclick:preventDefault="true" @onclick="() => Cancel()" class="btn-gray">Cancel</button>
        </span>

    </EditForm>


@code {

    private Course? courseDetails;
    [Parameter]
    public string? Id { get; set; }

    private string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {

        courseDetails = new Course
            {
                IsBestSeller = false,
                Title = "",
                Ingress = "",
                Hours = "",
                Authors = [],
                Prices = new Prices
                {
                    CurrentPrice = 0,
                    DiscountPrice = 0,
                },
                Content = new Content
                {
                    Description = "",
                    ProgramDetails = new List<ProgramDetailItem>()
                }
            };

    }




    private string FirstAuthorName
    {
        get => courseDetails.Authors.FirstOrDefault()?.Name;
        set
        {
            var author = courseDetails.Authors.FirstOrDefault();
            if (author != null)
            {
                author.Name = value;
            }
            else
            {
                courseDetails.Authors.Add(new Author { Name = value });
            }
        }
    }

    private string FirstProgramDetailTitle
    {
        get => courseDetails.Content.ProgramDetails.FirstOrDefault()?.Title;
        set
        {
            var programDetail = courseDetails.Content.ProgramDetails.FirstOrDefault();
            if (programDetail != null)
            {
                programDetail.Title = value;
            }
        }
    }

    private string FirstProgramDetailDescription
    {
        get => courseDetails.Content.ProgramDetails.FirstOrDefault()?.Description;
        set
        {
            var programDetail = courseDetails.Content.ProgramDetails.FirstOrDefault();
            if (programDetail != null)
            {
                programDetail.Description = value;
            }
        }
    }



    private async Task CreateCourseAsync()
    {
        if (courseDetails.Authors == null)
        {
            courseDetails.Authors = new List<Author>();
        }

        var programDetailsMutations = courseDetails.Content.ProgramDetails.Select(pd => $"{{ id: {pd.Id}, title: \"{pd.Title}\", description: \"{pd.Description}\" }}");
        var programDetailsMutationString = string.Join(", ", programDetailsMutations);

        if (courseDetails.Authors.Count == 0)
        {
            courseDetails.Authors.Add(new Author { Name = FirstAuthorName });
        };

        var query = new GraphQLQuery
            {
                Query = $@"mutation CreateCourse {{
    createCourse(input: {{
        isBestSeller: {courseDetails.IsBestSeller.ToString().ToLower()},
        isDigital: false,
        starRating: 0,
        categories: null,
        title: ""{courseDetails.Title}"",
        ingress: ""{courseDetails.Ingress}"",
        hours: ""{courseDetails.Hours}"",
        authors: [{{
            name: ""{courseDetails.Authors.FirstOrDefault().Name}""
        }}],
        prices: {{
            currentPrice: {courseDetails.Prices.CurrentPrice.ToString(CultureInfo.InvariantCulture)},
            discountPrice: {courseDetails.Prices.DiscountPrice.ToString(CultureInfo.InvariantCulture)}
                }},
        content: {{
            description: ""{courseDetails.Content.Description}"",
            programDetails: [{programDetailsMutationString}]
            }}
        }})

        {{
            id
        }}
    }}"
            };

        Console.WriteLine(query.Query);

        var response = await Http.PostAsJsonAsync("https://coursesprovider-silicon-bnar.azurewebsites.net/api/graphql?code=3rOEfiwSz9VcWDjwXQUbtxAhmkAiu57NCWM-bZXR5qGGAzFuLqkrQA%3D%3D", query);

        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine(responseContent);
        if (response.IsSuccessStatusCode)
        {
            Message = "Update successful!";
        }
        else
        {
            Message = "Update failed";
        }

        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/coursemanager");
    }

    private void AddProgramDetail()
    {
        courseDetails.Content.ProgramDetails.Add(new ProgramDetailItem
            {
                Id = courseDetails.Content.ProgramDetails.Count + 1,
                Title = "",
                Description = ""
            });

        InvokeAsync(StateHasChanged);
    }
}
