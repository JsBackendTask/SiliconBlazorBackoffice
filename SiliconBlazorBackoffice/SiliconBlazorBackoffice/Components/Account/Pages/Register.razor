@page "/Account/Register"
<PageTitle>Register</PageTitle>

<h1>Register a administrator</h1>
<p>This is for testing purposes, if you want to create an administrator create an account here.</p>

<div id="signup" class="top-title">

    <EditForm Model="Model" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="Submit" FormName="SignUpForm" class="signup-form">
        <StatusMessage Message="@Message" />
        <DataAnnotationsValidator />
        <h1>Create account</h1>
        <p class="signin-text">Already have an account? <NavLink href="/signin">Sign in here.</NavLink></p>

        <div class="names-container">
            <div class="input-control">
                <label for="firstname" class="labels">Firstname</label>
                <InputText @bind-Value="Model.FirstName" class="firstname" id="firstname" />
                <span class="error error-styling"><ValidationMessage For="@(() => Model.FirstName)" /></span>
            </div>

            <div class="input-control">
                <label for="lastname" class="labels">Lastname</label>
                <InputText @bind-Value="Model.LastName" class="lastname" id="lastname" />
                <span class="error error-styling"><ValidationMessage For="@(() => Model.LastName)" /></span>
            </div>
        </div>

        <div class="input-control">
            <label for="email" class="labels">Email</label>
            <InputText @bind-Value="Model.Email" type="email" class="email" aria-label="Email" id="email" />
            <span class="error error-styling"><ValidationMessage For="@(() => Model.Email)" /></span>
        </div>

        <div class="input-control">
            <label for="password" class="labels">Password</label>
            <InputText @bind-Value="Model.Password" type="password" class="password" aria-label="Password" id="password" />
            <span class="error error-styling"><ValidationMessage For="@(() => Model.Password)" /></span>
        </div>

        <div class="input-control">
            <label for="conf-password" class="labels">Confirm password</label>
            <InputText @bind-Value="Model.ConfirmPassword" type="password" class="password" aria-label="Password" id="conf-password" />
            <span class="error error-styling"><ValidationMessage For="@(() => Model.ConfirmPassword)" /></span>
        </div>

        <div class="checkmark">
            <InputCheckbox @bind-Value="Model.TermsAndConditions" id="term-check" class="termscheck" title="Remember me" />
            <label for="term-check" class="term-label">I agree to the <NavLink href="/">Terms</NavLink> & <NavLink href="/">Conditions</NavLink>.</label>
        </div>
        <span class="error error-styling"><ValidationMessage For="@(() => Model.TermsAndConditions)" /></span>
        <button type="submit" class="btn-theme-s" formmethod="post">Register now!</button>
    </EditForm>

</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";

    [SupplyParameterFromForm]
    public SignUpModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task Submit() /* I can't use try catch here or the redirect breaks. It throws an exception at the navigation stage. */
    {
        var existingUser = await UserManagers.FindByEmailAsync(Model.Email);
        if (existingUser != null)
        {
            identityErrors = new List<IdentityError> { new IdentityError { Description = "A user with this email already exists." } };
            return;
        }

        var user = new ApplicationUser
            {
                FirstName = Model.FirstName,
                LastName = Model.LastName,
                UserName = Model.Email,
                Email = Model.Email
            };

        var result = await UserManagers.CreateAsync(user, Model.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var roleResult = await UserManagers.AddToRoleAsync(user, "Admin");
        if (!roleResult.Succeeded)
        {
            identityErrors = roleResult.Errors;
            return;
        }

        // var response = await Http.PostAsJsonAsync("https://verificationprovider-silicon-bnar.azurewebsites.net/api/Verify?code=GYUemekurKbemZgcZjQjK_WZHFRHCBUF6FHqAeYVq5BBAzFuDzsozw%3D%3D", Model);
        // if (UserManagers.Options.SignIn.RequireConfirmedAccount)
        // {
        //     NavigationManager.NavigateTo($"/Account/RegisterConfirmation?email={Model.Email}");
        // }
        else
        {
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo(ReturnUrl ?? "");
        }

    }

    public class SignUpModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "Invalid firstname")]
        [MinLength(2, ErrorMessage = "Invalid firstname")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Invalid lastname")]
        [MinLength(2, ErrorMessage = "Invalid lastname")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email adress", Prompt = "Enter your email adress", Order = 2)]
        [Required(ErrorMessage = "Invalid Email")]
        [RegularExpression("^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password.", Order = 3)]
        [Required(ErrorMessage = "Invalid password")]
        [RegularExpression("^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$", ErrorMessage = "Invalid Password.")]
        public string Password { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
        [Required(ErrorMessage = "Confirm password")]
        [Compare(nameof(Password), ErrorMessage = "Password doesn't match.")]
        public string ConfirmPassword { get; set; } = null!;

        [Display(Name = "I agree to the <a href=\"#\">Terms</a> & <a href=\"#\">Conditions", Order = 5)]
        [CheckBoxRequired(ErrorMessage = "You must accept the terms and conditions.")]
        public bool TermsAndConditions { get; set; } = false;
    }

    public class CheckBoxRequired : ValidationAttribute
    {
        public override bool IsValid(object? value) => value is bool b && b;
    }

}
